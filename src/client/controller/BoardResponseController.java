/***************************************************************
Generated by Eclipse
Version JAVA SE 1.7

BoardResponseController.java : implementation file
This is a controller class for Get the information of the global board from Server, 
 and update the local board information of  Model package.
History:
1 Oct, 2016	--- George Heineman @1
- Created.

10 Dec, 2016 --- Zhe Lyu @2
-Modify.

*****************************************************************/

package client.controller;

import javax.sound.midi.MidiDevice.Info;

import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import xml.Message;
import client.model.GameRoom;
import client.view.Application;


public class BoardResponseController extends ControllerChain {

	public Application app;
	public GameRoom model;
	
	public BoardResponseController(Application a, GameRoom m) {
		super();
		this.app = a;
		this.model = m;
	}
/**
 * Analysis the information of XML and update the information of Model package 
 */
	public boolean process(Message response) {
		
		String type = response.contents.getFirstChild().getLocalName();
		if (!type.equals ("boardResponse")) {
		//	System.out.println("is not board response response");
			return next.process(response);
		}
		System.out.println(response.toString());
		Node boardResponse = response.contents.getFirstChild();
		NamedNodeMap map = boardResponse.getAttributes();
	//	int size = Integer.valueOf(map.getNamedItem("size").getNodeValue());
		String managingUser = map.getNamedItem("managingUser").getNodeValue();
		String bonus = map.getNamedItem("bonus").getNodeValue();
	
	//	String content=map.getNamedItem("content").getNodeValue();
		String gameId = map.getNamedItem("gameId").getNodeValue();
		model.setGameId(gameId);
		//app.getResponseArea().append("Board Message received for game:" + gameId + "\n");
		//app.getResponseArea().append("Players:\n");
		
		
		NodeList list = boardResponse.getChildNodes();
		//System.out.println(list.getLength());
		String[] name= new String[list.getLength()];
		String[] position= new String[list.getLength()];
		String[] board= new String[list.getLength()];
		long[] s= new long[list.getLength()];
		for (int i = 0; i < list.getLength(); i++) {
			Node n = list.item(i);
		    String pname=  n.getAttributes().getNamedItem("name").getNodeValue();
		    name[i]=pname;
		    String pposition = n.getAttributes().getNamedItem("position").getNodeValue();
		    position[i]=pposition;
			String pboard = n.getAttributes().getNamedItem("board").getNodeValue();
			board[i]=pboard;
			//System.out.println(board[i]);
			String score = n.getAttributes().getNamedItem("score").getNodeValue();
			s[i] = Long.valueOf(score);
	
		}
		model.boardResponseHandler(managingUser, bonus, name, position, board, s);
				
		return true;
			
		
	
	} 

}

