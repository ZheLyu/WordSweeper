/***************************************************************
Generated by Eclipse
Version JAVA SE 1.7

BoardDisplay.java : implementation file
This is a view class for creating the game board page.

History:
7 Oct, 2016	--- Bing Zhao @1
- Created.

*****************************************************************/



package client.view;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.Timer;

import client.controller.*;
import client.model.GameRoom;

import javax.swing.JWindow;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JTextArea;


public class BoardDisplay extends JWindow implements ActionListener{
	
	 
	 GameRoom model;
     Application app;
     
     SweeperPanel sweeperPanel;
    
     
    
     private JButton btnLeft;
     private JButton btnRight;
     private JButton btnUp;
     private JButton btnDown;
     private JButton btnLock;
     private JButton btnReset;
     private JButton btnExit;
     Timer timer; 
	
     static int DLG_W=864;
     static int DLG_H=576;
     
     static int WIDTH=80;
     static int HEIGHT=80;
     static int VSTATRT=480;
     static int HSTATRT=50;
     static int HSPAN=80;
     private JTextArea textWordSelect;
     
     
	/**
	 * Create the frame.
	 */
	public BoardDisplay(final Application app, final GameRoom m) {
		
		
		this.model = m;
		this.app = app;
		
		setBounds(0, 0, DLG_W, DLG_H);
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
		
		
		sweeperPanel = new SweeperPanel(app, m);
		sweeperPanel.setBounds(0, 0, DLG_W, DLG_H);
		
		
		
	
		btnLeft = new JButton("LEFT");
		btnLeft.setBounds(HSTATRT, VSTATRT, WIDTH, HEIGHT);
		
		btnLeft.setBorderPainted(false);
		btnLeft.setContentAreaFilled(false);
		Icon iconLeftA=new ImageIcon("src\\client\\res\\leftA.png");
	    Icon iconLeftB=new ImageIcon("src\\client\\res\\leftB.png");
	    btnLeft.setIcon(iconLeftA);
	    btnLeft.setPressedIcon(iconLeftB);
		btnLeft.addActionListener(this);
		
		btnRight = new JButton("RIGHT");
		btnRight.setBounds(HSTATRT+HSPAN, VSTATRT, WIDTH, HEIGHT);
		
		btnRight.setBorderPainted(false);
		btnRight.setContentAreaFilled(false);
		Icon iconRightA=new ImageIcon("src\\client\\res\\rightA.png");
	    Icon iconRightB=new ImageIcon("src\\client\\res\\rightB.png");
	    btnRight.setIcon(iconRightA);
	    btnRight.setPressedIcon(iconRightB);
		btnRight.addActionListener(this);
		
		btnUp = new JButton("UP");
		btnUp.setBounds(HSTATRT+HSPAN*2, VSTATRT, WIDTH, HEIGHT);
		
		btnUp.setBorderPainted(false);
		btnUp.setContentAreaFilled(false);
		Icon iconUpA=new ImageIcon("src\\client\\res\\upA.png");
	    Icon iconUpB=new ImageIcon("src\\client\\res\\upB.png");
	    btnUp.setIcon(iconUpA);
	    btnUp.setPressedIcon(iconUpB);
		btnUp.addActionListener(this);
		
		btnDown = new JButton("DOWN");
		btnDown.setBounds(HSTATRT+HSPAN*3, VSTATRT, WIDTH, HEIGHT);
		
		btnDown.setBorderPainted(false);
		btnDown.setContentAreaFilled(false);
		Icon iconDownA=new ImageIcon("src\\client\\res\\downA.png");
	    Icon iconDownB=new ImageIcon("src\\client\\res\\downB.png");
	   
	    btnDown.setIcon(iconDownA);
	    btnDown.setPressedIcon(iconDownB);
		btnDown.addActionListener(this);
		
		btnLock = new JButton("LOCK");
		btnLock.setBounds(DLG_W-WIDTH-20, VSTATRT-260, WIDTH, HEIGHT);
		
		btnLock.setBorderPainted(false);
		btnLock.setContentAreaFilled(false);
		Icon iconLockA=new ImageIcon("src\\client\\res\\lockA.png");
	    Icon iconLockB=new ImageIcon("src\\client\\res\\lockB.png");
	    btnLock.setIcon(iconLockA);
	    //btnLock.setPressedIcon(iconLockB);
		btnLock.addActionListener(this);
		
		
		btnReset = new JButton("RESET");
		btnReset.setBounds(DLG_W-WIDTH-20, VSTATRT-160, WIDTH, HEIGHT);
		
		btnReset.setBorderPainted(false);
		btnReset.setContentAreaFilled(false);
		Icon iconRstA=new ImageIcon("src\\client\\res\\rstA.png");
	    Icon iconRstB=new ImageIcon("src\\client\\res\\rstB.png");
	    btnReset.setIcon(iconRstA);
	    btnReset.setPressedIcon(iconRstB);
	    
		btnReset.addActionListener(this);
		
		btnExit = new JButton("EXIT");
		btnExit.setBounds(DLG_W-WIDTH-20, VSTATRT, 105, 79);
		
		btnExit.setBorderPainted(false);
		btnExit.setContentAreaFilled(false);
		Icon iconExitA=new ImageIcon("src\\client\\res\\returnA.png");
	    Icon iconExitB=new ImageIcon("src\\client\\res\\returnB.png");
	    btnExit.setIcon(iconExitA);
	    btnExit.setPressedIcon(iconExitB);
	    
	    
		btnExit.addActionListener(this);
			
		getContentPane().setLayout(null);  		
		getContentPane().add(sweeperPanel);
		
		
		sweeperPanel.setLayout(null);	
		sweeperPanel.add(btnLeft);
		sweeperPanel.add(btnRight);
		sweeperPanel.add(btnUp);
		sweeperPanel.add(btnDown);
		sweeperPanel.add(btnLock);
		sweeperPanel.add(btnReset);
		sweeperPanel.add(btnExit);
		
		//textWordSelect = new JTextArea();
		//textWordSelect.setBounds(100, 100, 200, 138);
		//getContentPane().add(textWordSelect);
		
		
		//timer = new Timer(500, this);
		//timer.start();
		
		setVisible(true);
			         
	}


	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
		if(arg0.getSource() == timer)
		{
			//Update total score, selected word and calculated score here..
			//textWordSelect.setText(sweeperPanel.getLastSelectedWord());
			
		} else {
			if(arg0.getSource() == btnLeft) {
				RepositionBoardRequestController reposition=new RepositionBoardRequestController(app,model);
				reposition.leftProcess();
			}
			
			if(arg0.getSource() == btnRight) {
				RepositionBoardRequestController reposition=new RepositionBoardRequestController(app,model);
				reposition.rightProcess();
			}
			
			if(arg0.getSource() == btnUp) {
				RepositionBoardRequestController reposition=new RepositionBoardRequestController(app,model);
				reposition.upProcess();
			}
			
			if(arg0.getSource() == btnDown) {
				RepositionBoardRequestController reposition=new RepositionBoardRequestController(app,model);
				reposition.downProcess();
			}
			
			if(arg0.getSource() == btnLock) {
				LockGameRequestController lock=new LockGameRequestController(app,model);
				lock.process();
			}
			
			if(arg0.getSource() == btnReset) {
				ResetGameRequestController reset=new ResetGameRequestController(app,model);
				reset.process();
			}
			if(arg0.getSource() == btnExit) {
				if(model.getGameMode()==false)
				{
					ExitGameRequestController reset=new ExitGameRequestController(app,model);
					reset.process();
				}
				dispose();
			}
		}
	
		
	}
}
